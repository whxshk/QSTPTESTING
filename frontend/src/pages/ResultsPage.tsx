import { AlertTriangle, CheckCircle, AlertCircle, XCircle, Download, Home, FileText, Users, TrendingUp } from 'lucide-react';
import { AnalysisResult } from '../api';

interface ResultsPageProps {
  result: AnalysisResult | null;
  onReset: () => void;
}

const ResultsPage = ({ result, onReset }: ResultsPageProps) => {
  if (!result) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600">No analysis results available</p>
          <button onClick={onReset} className="btn-primary mt-4">
            Start New Analysis
          </button>
        </div>
      </div>
    );
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return <XCircle className="w-5 h-5 text-red-600" />;
      case 'medium':
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
      case 'low':
        return <AlertCircle className="w-5 h-5 text-blue-600" />;
      default:
        return <AlertCircle className="w-5 h-5 text-gray-600" />;
    }
  };

  const getSeverityBadgeClass = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    if (score >= 40) return 'text-orange-600';
    return 'text-red-600';
  };

  const getScoreBgColor = (score: number) => {
    if (score >= 80) return 'bg-green-50 border-green-200';
    if (score >= 60) return 'bg-yellow-50 border-yellow-200';
    if (score >= 40) return 'bg-orange-50 border-orange-200';
    return 'bg-red-50 border-red-200';
  };

  const downloadReport = () => {
    const reportText = `
FINTECH REGULATORY READINESS REPORT
====================================

OVERALL SCORE: ${result.score}/100
GRADE: ${result.grade}
CATEGORY: ${result.category}
EXPERT REVIEW RECOMMENDED: ${result.needs_expert_review ? 'Yes' : 'No'}

COMPLIANCE GAPS (${result.gap_count} Total)
====================================

${result.gaps.map((gap, i) => `
${i + 1}. ${gap.title}
   Severity: ${gap.severity.toUpperCase()}
   Rule Reference: ${gap.rule_ref}
   Evidence: ${gap.evidence}
   Explanation: ${gap.explanation}
`).join('\n')}

RECOMMENDATIONS
====================================

${result.recommendations.map((rec, i) => `
Gap: ${rec.gap_title} (${rec.gap_ref})

Programs:
${rec.programs.map(p => `  - ${p.program_name}
    Focus: ${p.focus_areas.join(', ')}
    Contact: ${p.contact}`).join('\n')}

Experts:
${rec.experts.map(e => `  - ${e.name}
    Specialization: ${e.specialization}
    Contact: ${e.contact}`).join('\n')}
`).join('\n')}

${result.notes.length > 0 ? `
ADDITIONAL NOTES
====================================
${result.notes.map((note, i) => `${i + 1}. ${note}`).join('\n')}
` : ''}

Generated by Fintech Regulatory Readiness Platform
Report Date: ${new Date().toLocaleDateString()}
`;

    const blob = new Blob([reportText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `compliance-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-primary-600 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">Compliance Analysis Results</h1>
                <p className="text-sm text-gray-500">Regulatory Readiness Report</p>
              </div>
            </div>
            <div className="flex space-x-3">
              <button onClick={downloadReport} className="btn-secondary inline-flex items-center space-x-2">
                <Download className="w-4 h-4" />
                <span>Download Report</span>
              </button>
              <button onClick={onReset} className="btn-secondary inline-flex items-center space-x-2">
                <Home className="w-4 h-4" />
                <span>New Analysis</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Score Card */}
        <div className={`card border-2 mb-8 ${getScoreBgColor(result.score)}`}>
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-gray-700 mb-2">
                Regulatory Readiness Score
              </h2>
              <div className="flex items-baseline space-x-3">
                <span className={`text-6xl font-bold ${getScoreColor(result.score)}`}>
                  {result.score}
                </span>
                <span className="text-3xl text-gray-500">/100</span>
              </div>
              <div className="mt-3 flex items-center space-x-4">
                <span className="text-lg font-medium text-gray-700">
                  Grade: <span className={getScoreColor(result.score)}>{result.grade}</span>
                </span>
                <span className="text-gray-400">â€¢</span>
                <span className="text-lg text-gray-600">{result.category}</span>
              </div>
            </div>
            <div className="text-right">
              {result.needs_expert_review && (
                <div className="inline-flex items-center space-x-2 px-4 py-2 bg-red-100 border border-red-300 rounded-lg mb-3">
                  <AlertTriangle className="w-5 h-5 text-red-600" />
                  <span className="font-semibold text-red-800">Expert Review Recommended</span>
                </div>
              )}
              <div className="text-sm text-gray-600 mt-2">
                {result.gap_count} compliance gap{result.gap_count !== 1 ? 's' : ''} identified
              </div>
            </div>
          </div>
        </div>

        {/* Score Breakdown */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <div className="card bg-red-50 border border-red-200">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-semibold text-red-900">High Severity</span>
              <XCircle className="w-5 h-5 text-red-600" />
            </div>
            <div className="text-3xl font-bold text-red-600">
              {result.score_breakdown.severity_breakdown.high.count}
            </div>
            <div className="text-sm text-red-700 mt-1">
              -{result.score_breakdown.severity_breakdown.high.total_deduction} points
            </div>
          </div>

          <div className="card bg-yellow-50 border border-yellow-200">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-semibold text-yellow-900">Medium Severity</span>
              <AlertTriangle className="w-5 h-5 text-yellow-600" />
            </div>
            <div className="text-3xl font-bold text-yellow-600">
              {result.score_breakdown.severity_breakdown.medium.count}
            </div>
            <div className="text-sm text-yellow-700 mt-1">
              -{result.score_breakdown.severity_breakdown.medium.total_deduction} points
            </div>
          </div>

          <div className="card bg-blue-50 border border-blue-200">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-semibold text-blue-900">Low Severity</span>
              <AlertCircle className="w-5 h-5 text-blue-600" />
            </div>
            <div className="text-3xl font-bold text-blue-600">
              {result.score_breakdown.severity_breakdown.low.count}
            </div>
            <div className="text-sm text-blue-700 mt-1">
              -{result.score_breakdown.severity_breakdown.low.total_deduction} points
            </div>
          </div>
        </div>

        {/* Gaps Table */}
        <div className="card mb-8">
          <div className="flex items-center space-x-3 mb-6">
            <FileText className="w-6 h-6 text-primary-600" />
            <h3 className="text-2xl font-bold text-gray-900">Compliance Gaps</h3>
          </div>

          {result.gaps.length === 0 ? (
            <div className="text-center py-12">
              <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
              <p className="text-lg font-semibold text-gray-900">No Compliance Gaps Identified</p>
              <p className="text-gray-600 mt-2">
                Your startup appears to meet all QCB regulatory requirements based on the
                submitted documentation.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {result.gaps.map((gap, index) => (
                <div
                  key={index}
                  className="border border-gray-200 rounded-lg p-5 hover:shadow-md transition-shadow"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-start space-x-3 flex-1">
                      {getSeverityIcon(gap.severity)}
                      <div className="flex-1">
                        <h4 className="text-lg font-semibold text-gray-900">
                          {gap.title}
                        </h4>
                        <p className="text-sm text-gray-500 mt-1">
                          Reference: {gap.rule_ref}
                        </p>
                      </div>
                    </div>
                    <span
                      className={`px-3 py-1 rounded-full text-xs font-semibold border ${getSeverityBadgeClass(
                        gap.severity
                      )}`}
                    >
                      {gap.severity.toUpperCase()}
                    </span>
                  </div>

                  <div className="ml-8 space-y-3">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Evidence:</p>
                      <p className="text-sm text-gray-600 mt-1">{gap.evidence}</p>
                    </div>

                    <div>
                      <p className="text-sm font-medium text-gray-700">Explanation:</p>
                      <p className="text-sm text-gray-600 mt-1">{gap.explanation}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Recommendations */}
        {result.recommendations.length > 0 && (
          <div className="card mb-8">
            <div className="flex items-center space-x-3 mb-6">
              <Users className="w-6 h-6 text-primary-600" />
              <h3 className="text-2xl font-bold text-gray-900">Recommended Actions</h3>
            </div>

            <div className="space-y-6">
              {result.recommendations.map((rec, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-5">
                  <h4 className="font-semibold text-gray-900 mb-1">
                    {rec.gap_title}
                  </h4>
                  <p className="text-sm text-gray-500 mb-4">
                    {rec.gap_ref} â€¢ {rec.severity} severity
                  </p>

                  {rec.programs.length > 0 && (
                    <div className="mb-4">
                      <p className="text-sm font-semibold text-gray-700 mb-2">
                        Recommended Programs:
                      </p>
                      <div className="space-y-3">
                        {rec.programs.map((program, i) => (
                          <div key={i} className="bg-primary-50 border border-primary-200 rounded-lg p-4">
                            <h5 className="font-semibold text-primary-900">
                              {program.program_name}
                            </h5>
                            <p className="text-sm text-primary-700 mt-1">
                              {program.description}
                            </p>
                            <div className="mt-2 flex flex-wrap gap-2">
                              {program.focus_areas.map((area, j) => (
                                <span
                                  key={j}
                                  className="px-2 py-1 bg-primary-100 text-primary-800 rounded text-xs font-medium"
                                >
                                  {area}
                                </span>
                              ))}
                            </div>
                            <p className="text-xs text-primary-600 mt-2">
                              Contact: {program.contact}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {rec.experts.length > 0 && (
                    <div>
                      <p className="text-sm font-semibold text-gray-700 mb-2">
                        Recommended Experts:
                      </p>
                      <div className="space-y-3">
                        {rec.experts.map((expert, i) => (
                          <div key={i} className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                            <h5 className="font-semibold text-gray-900">{expert.name}</h5>
                            <p className="text-sm text-gray-700 mt-1">
                              {expert.specialization}
                            </p>
                            <p className="text-xs text-gray-600 mt-1">
                              {expert.experience_years} years experience â€¢ {expert.background}
                            </p>
                            <p className="text-xs text-gray-500 mt-2">
                              {expert.availability} â€¢ Contact: {expert.contact}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Additional Notes */}
        {result.notes.length > 0 && (
          <div className="card bg-blue-50 border border-blue-200">
            <h3 className="text-lg font-semibold text-blue-900 mb-3">Additional Notes</h3>
            <ul className="space-y-2">
              {result.notes.map((note, index) => (
                <li key={index} className="text-sm text-blue-800 flex items-start space-x-2">
                  <span className="text-blue-600 mt-1">â€¢</span>
                  <span>{note}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Next Steps CTA */}
        <div className="mt-8 card bg-gradient-to-r from-primary-600 to-blue-600 text-white">
          <h3 className="text-2xl font-bold mb-4">Ready to Improve Your Compliance?</h3>
          <p className="mb-6 text-primary-50">
            Take the next step toward QCB licensing by addressing these gaps with expert
            guidance from QDB programs and compliance specialists.
          </p>
          <div className="flex space-x-4">
            <button onClick={downloadReport} className="bg-white text-primary-600 px-6 py-3 rounded-lg font-semibold hover:bg-primary-50 transition-colors">
              Download Full Report
            </button>
            <button onClick={onReset} className="bg-primary-700 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-800 transition-colors">
              Analyze Another Startup
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultsPage;
